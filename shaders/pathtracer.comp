#version 450
layout(binding=0, rgba8) uniform writeonly image2D output_image;

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

uint pcg_hash(uint in_state) {
    uint state = in_state * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}

float rand_float(inout uint seed) {
    seed = pcg_hash(seed);
    return seed / 4294967295.0;
}

struct material {
    vec3 albedo;
    vec3 emission;
};

struct sphere {
    vec3 position;
    float radius;
    material material;
};

const sphere spheres[3] = sphere[3](
    sphere(vec3(0.0, 0.0, -4.0), 1.0, material(vec3(1.0, 0.4, 0.4), vec3(0.0, 0.0, 0.0))),
    sphere(vec3(0.0, -101.0, -4.0), 100.0, material(vec3(0.4, 1.0, 0.4), vec3(0.0, 0.0, 0.0))),
    sphere(vec3(3.0, 3, -6.0), 2.0, material(vec3(0.0, 0.0, 0.0), vec3(0.85 * 2, 0.8 * 2, 0.6 * 2)))
);

struct hit_result {
    bool did_hit;
    float dist;

    vec3 point;
    vec3 normal;

    material material;
};

hit_result ray_sphere(vec3 ro, vec3 rd, sphere sphere) {
    hit_result result;
    result.did_hit = false;

    vec3 oc = ro - sphere.position;

    float a = dot(rd, rd);
    float b = 2.0 * dot(oc, rd);
    float c = dot(oc, oc) - (sphere.radius * sphere.radius);

    float discriminant = b * b - 4.0 * a * c;

    if (discriminant >= 0.0) {
        float t = (-b - sqrt(discriminant)) / (2.0 * a);
        
        if(t < 0.0) { 
            return result;
        }

        result.dist = t;
        result.material = sphere.material;
        result.point = ro + t * rd;
        result.normal = normalize(result.point - sphere.position);

        result.did_hit = true;
    }

    return result;
}

hit_result calculate_ray_collision(vec3 ray_origin, vec3 ray_dir) {
    hit_result closest_hit;
    closest_hit.did_hit = false;
    closest_hit.dist = 1.0 / 0.0;

    for(int i = 0; i < spheres.length(); i++) {
        sphere sphere = spheres[i];
        hit_result result = ray_sphere(ray_origin, ray_dir, sphere);
        if(result.did_hit && result.dist < closest_hit.dist) {
            closest_hit = result;
        }
    }

    return closest_hit;
}

#define MAX_BOUNCE_COUNT 100

vec3 random_dir(inout uint state) {
    float x = rand_float(state) * 2.0 - 1.0;
    float y = rand_float(state) * 2.0 - 1.0;
    float z = rand_float(state) * 2.0 - 1.0;

    return normalize(vec3(x, y, z));
}

vec3 trace(vec3 ray_orig, vec3 ray_dir, inout uint state) {
    vec3 incoming_light = vec3(0);
    vec3 ray_color = vec3(1.0);

    for(int i = 0; i < MAX_BOUNCE_COUNT; i++) {
        hit_result result = calculate_ray_collision(ray_orig, ray_dir);
        if(result.did_hit) {
            ray_orig = result.point;
            ray_dir = normalize(result.normal + random_dir(state));

            material mat = result.material;

            incoming_light += mat.emission * ray_color;
            ray_color *= mat.albedo;
        }
        else {
            incoming_light += vec3(0.1, 0.1, 0.9) * ray_color;
            break;
        }
    }

    return incoming_light;
}

#define RAYS_PER_PIXEL 10000

#define GAMMA 2.2

vec3 tonemap(vec3 color) {
    const float A = 2.51;
    const float B = 0.03;
    const float C = 2.43;
    const float D = 0.59;
    const float E = 0.14;

    return clamp((color * (A * color + B)) / (color * (C * color + D) + E), 0.0, 1.0);
}

vec3 apply_gamma_correction(vec3 color) {
    return pow(color, vec3(1.0 / GAMMA));
}

void main() {
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    ivec2 resolution = imageSize(output_image);

    vec2 uv = (pixel_coords - 0.5 * vec2(resolution)) / resolution.y;
    uv.y = -uv.y;

    vec3 ray_orig = vec3(0.0);
    vec3 ray_dir = vec3(uv, -1.0);

    uint seed = pixel_coords.x + pixel_coords.y * resolution.x;

    vec3 color = vec3(0);
    for(int i = 0; i < RAYS_PER_PIXEL; i++) {
        color += trace(ray_orig, ray_dir, seed);
    }

    color /= RAYS_PER_PIXEL;

    color = tonemap(color);

    color = apply_gamma_correction(color);

    imageStore(output_image, pixel_coords, vec4(color, 1.0));
}